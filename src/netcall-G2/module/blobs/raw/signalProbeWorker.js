!function(t){var e={};function s(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(n,i,function(e){return t[e]}.bind(null,i));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=self;class i{constructor(t){this.signalProbers={},this.pingInterval=t.pingInterval,this.maxRtt=t.maxRtt,this.wsTimeout=t.wsTimeout,this.reconnectionInterval=t.reconnectionInterval;for(let e in t.signalStates)t.signalStates[e]?this.signalProbers[e]=new r(this,t.signalStates[e]):this.error(`Unrecognized ${e} ${t.signalStates}`);this.timer=setInterval(()=>{this.sync()},1e3)}sync(){const t=Date.now(),e={};for(let s in this.signalProbers){const n=this.signalProbers[s].signalState;-1===n.ping.rtt?n.active=!1:n.ping.recvIndex<n.ping.sendIndex&&(n.ping.rtt=Math.max(n.ping.rtt,t-n.ping.lastSentAt)),e[s]=n}n.postMessage({cmd:"sync",data:e})}log(t){n.postMessage({cmd:"log",data:t})}error(t){n.postMessage({cmd:"error",data:t})}handleDebugMessage(t){var e;if("closeWs"===t.data.type)for(let s in this.signalProbers){const n=this.signalProbers[s];n.signalState.index===t.data.index&&(this.error(`Closing #${t.data.index} ${n.wsUrl}`),null===(e=n.ws)||void 0===e||e.close())}if("doNotSendPing"===t.data.type)for(let e in this.signalProbers){const s=this.signalProbers[e];s.signalState.index===t.data.index&&(s.debug.doNotSendPing=!!t.data.value,s.log("doNotSendPing: "+JSON.stringify(t.data)))}}handleOnlineMessage(t){this.log("收到在线事件，探测服务发起重连");for(let t in this.signalProbers){this.signalProbers[t].init()}}}let a=null;n.postMessage({cmd:"ohayo"}),n.onmessage=t=>{const e=t.data;if("init"===e.cmd){if(a)return void a.error("Already Inited");const t=e.data;a=new i(t)}else if("debug"===e.cmd)null==a||a.handleDebugMessage(e);else{if("onOnline"!==e.cmd)return void(null==a||a.log("Invalid message "+JSON.stringify(e)));null==a||a.handleOnlineMessage(e)}};class r{constructor(t,e){this.debug={doNotSendPing:!1},this.signalProbeWorker=t,this.signalState=e;const s=e.wsUrl.split(/\/\?|\?/);this.wsUrl=`wss://${s[0]}/nertc/private/ping${s[1]?"?"+s[1]:""}`,this.pingTimer=setInterval(this.checkState.bind(this),100),this.ws=null,this.init()}init(){this.ws&&this.ws.close(),this.ws=new WebSocket(this.wsUrl),this.ws.onmessage=this.handleWsMessage.bind(this,this.ws),this.ws.onopen=this.handleWsOpen.bind(this,this.ws),this.ws.onclose=this.checkState.bind(this),this.ws.onerror=this.checkState.bind(this),this.signalState.connect.startCnt++,this.signalState.connect.initAt=Date.now(),this.signalState.connect.connectAt=-1,this.signalState.ping.sendIndex=0,this.signalState.ping.recvIndex=0}getTag(){return`[signalProber #${this.signalState.index} rtt${this.signalState.ping.rtt}ms ${this.signalState.connect.successCnt}_${this.signalState.connect.failCnt}]`}log(t){this.signalProbeWorker.log(`${this.getTag()}${t}`)}error(t){this.signalProbeWorker.error(`${this.getTag()}${t}`)}checkState(){const t=Date.now();if(this.ws)if(this.ws.readyState===WebSocket.OPEN)if(this.signalState.ping.sendIndex===this.signalState.ping.recvIndex){if(t-this.signalState.ping.lastSentAt>this.signalProbeWorker.pingInterval){const e=""+t;this.debug.doNotSendPing||this.ws.send(e),this.signalState.ping.lastSentAt=t,this.signalState.ping.lastSentMsg=e,this.signalState.ping.sendIndex++}}else t-this.signalState.ping.lastSentAt>this.signalProbeWorker.maxRtt&&(this.signalState.active=!1,this.signalState.ping.rtt=-1),t-this.signalState.ping.lastSentAt>this.signalProbeWorker.wsTimeout&&(this.log(`timeout: ${t-this.signalState.ping.lastSentAt}ms. Connect cnt:${this.signalState.connect.startCnt} ${this.wsUrl}`),this.ws.close(),this.ws=null,this.init());else this.ws.readyState===WebSocket.CONNECTING||this.ws.readyState!==WebSocket.CLOSED&&this.ws.readyState!==WebSocket.CLOSING||(-1===this.signalState.connect.connectAt||0===this.signalState.ping.recvIndex?(this.ws=null,this.signalState.connect.failCnt++,this.signalState.connect.failCntFromLastSuccess++,this.signalState.connect.failCnt<=3&&this.log(`[checkState]WebSocket Failed count:${this.signalState.connect.failCntFromLastSuccess}. Next try: ${this.getBackoffTime()}ms`)):this.signalState.active&&(this.log(`[checkState]WebSocket CLOSED. Next try: ${this.getBackoffTime()}ms`),this.signalState.active=!1,this.signalState.ping.rtt=-1,this.ws=null,this.signalProbeWorker.sync()));else t-this.signalState.connect.initAt>this.getBackoffTime()&&this.init()}getBackoffTime(){return this.signalProbeWorker.reconnectionInterval*this.signalState.connect.failCntFromLastSuccess}handleWsOpen(t,e){const s=e.data;if(this.ws===t){const t=Date.now();this.signalState.connect.connectAt=t,this.signalState.connect.failCnt<=3&&this.log(`open ${this.signalState.connect.connectAt-this.signalState.connect.initAt}ms ${this.signalState.wsUrl} => ${this.wsUrl}`),this.checkState()}else this.error("Detached ws open "+JSON.stringify(s))}handleWsMessage(t,e){const s=e.data;if(this.ws!==t)return void this.error("Detached ws message "+JSON.stringify(s));if(this.signalState.ping.lastSentMsg!==s)return void(this.signalState.connect.failCnt<=3&&this.error("Unrecognized message "+JSON.stringify(s)));const n=Date.now();this.signalState.ping.recvIndex++,this.signalState.ping.rtt=n-this.signalState.ping.lastSentAt,1===this.signalState.ping.recvIndex&&(this.signalState.connect.successCnt++,this.signalState.connect.failCntFromLastSuccess=0),this.signalState.ping.rtt>this.signalProbeWorker.maxRtt?(this.signalState.ping.rtt=-1,this.signalState.active=!1):this.signalState.ping.rtt>0&&(this.signalState.active=!0)}}}]);