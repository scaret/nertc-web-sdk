{"version":3,"file":"fakeMediaDevices.js","mappings":"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","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/./lib/audio/bbdbbjyy.mp3","webpack://[name]/./lib/audio/brysj.mp3","webpack://[name]/./lib/audio/mmdmmjwp.mp3","webpack://[name]/./node_modules/arraybuffer-loader/lib/to-array-buffer.js","webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/runtime/define property getters","webpack://[name]/webpack/runtime/hasOwnProperty shorthand","webpack://[name]/webpack/runtime/make namespace object","webpack://[name]/./lib/audio/audio.ts","webpack://[name]/./lib/video/video.ts","webpack://[name]/./lib/fakeMediaDevices.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fakeMediaDevices\"] = factory();\n\telse\n\t\troot[\"fakeMediaDevices\"] = factory();\n})(self, function() {\nreturn ","module.exports = require(\"../../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"\")","module.exports = require(\"../../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"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R3B+CO20wwjmhZUN6fFKjKT+3xNwAAD4oUoDCUfWTSMO7I0PCzzKEc9BJ8qNJWPWgEXJBQgLQmpg6HYPjorjGJiAaQCsR/E7zDsCFFaaABqgcBGA//sUxCKARBwbaaexIDB2ieqwwI1uAAC0nUyNgh5akZcLmYQ9ZsX4oaUD7ooBypsAEttCs2DWgVIwmKx6OoVc7CqKOcUCrVIBW8m4c/eqqgA1AAA/2HBIPYEUiYnGIQeU//sUxCiARAAdQ6ewZGB+Ayg0liRMJ/kpNkqiQaMw7C5Rrr6AFEqy0iEDKQ6i5Jai4WvZWEw0KDiI8NUOsupyue11AEahkCus8uIp4S/xEs6W//+Gl63ITEFNRTMuOTku//sUxC4CQ/BVLsYEaWB3g+QAlJhINVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxDSDwqADIQAMYDAAADSAAAAEVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxE+DwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxHUDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxJqDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxMADwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUxNoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV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\")","module.exports = require(\"../../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"\")","'use strict'\n\nmodule.exports = function (base64Data) {\n  var isBrowser = typeof window !== 'undefined' && typeof window.atob === 'function'\n  var binary = isBrowser ? window.atob(base64Data) : Buffer.from(base64Data, 'base64').toString('binary')\n  var bytes = new Uint8Array(binary.length)\n\n  for (var i = 0; i < binary.length; ++i) {\n    bytes[i] = binary.charCodeAt(i)\n  }\n\n  return bytes.buffer\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const brysj:ArrayBuffer = require(\"./brysj.mp3\")\nconst bbdbbjyy:ArrayBuffer = require(\"./bbdbbjyy.mp3\")\nconst mmdmmjwp:ArrayBuffer = require(\"./mmdmmjwp.mp3\")\n\nexport type BUILTIN_AB = \"brysj\"|\"bbdbbjyy\"|\"mmdmmjwp\";\n\nconst builtinABMap = {\n    brysj,\n    bbdbbjyy,\n    mmdmmjwp,\n};\n\nexport interface ChannelSettings{\n    data: ArrayBuffer | BUILTIN_AB;\n    loop: boolean;\n    gain: number;\n    noise?: {\n        gain: number;\n    }\n}\n\nexport interface fakeAudioTrackConstraints{\n    sampleRate?: number;\n    mono?: ChannelSettings;\n    left?: boolean|ChannelSettings;\n    right?: boolean|ChannelSettings;\n    channelCount?: 1|2;\n}\n\nconst ctxMap: {\n    [sampleRate: number]: AudioContext\n} = {};\n\nfunction addNoise(options: {\n    context: AudioContext,\n    destination:AudioNode,\n    inputNode: AudioNode,\n    gain: number,\n    output?: number,\n    input?: number,\n  }){\n\n    const scriptNode = options.context.createScriptProcessor(4096, 1, 1);\n    scriptNode.connect(options.destination, options.output || 0, options.input || 0);\n    options.inputNode.connect(scriptNode, 0, 0);\n\n    scriptNode.onaudioprocess = function(audioProcessingEvent) {\n        // The input buffer is the song we loaded earlier\n        var inputBuffer = audioProcessingEvent.inputBuffer;\n\n        // The output buffer contains the samples that will be modified and played\n        var outputBuffer = audioProcessingEvent.outputBuffer;\n\n        // Loop through the output channels (in this case there is only one)\n        for (var channel = 0; channel < outputBuffer.numberOfChannels; channel++) {\n            var inputData = inputBuffer.getChannelData(channel);\n            var outputData = outputBuffer.getChannelData(channel);\n\n            // Loop through the 4096 samples\n            for (var sample = 0; sample < inputBuffer.length; sample++) {\n                // make output equal to the same as the input\n                // add noise to each output sample\n                outputData[sample] = inputData[sample];\n                outputData[sample] += ((Math.random() * 2) - 1) * options.gain;\n            }\n        }\n    }\n}\n\nexport function getAudioTrack(constraint: fakeAudioTrackConstraints){\n    const {\n        sampleRate = 48000,\n        channelCount = 1,\n    } = constraint\n\n    let context:AudioContext = ctxMap[sampleRate];\n    if (!context){\n        if (window.AudioContext){\n            context = new AudioContext({sampleRate});\n        }else{\n            //@ts-ignore\n            context = new webkitAudioContext({sampleRate});\n        }\n        ctxMap[sampleRate] = context;\n    }\n    if (context.state !== \"running\"){\n        const btn = document.createElement(\"h1\")\n        btn.innerText = \"受浏览器自动播放策略影响，需点击此处以恢复音频播放\"\n        btn.onclick = ()=>{\n            context.resume().then(()=>{\n                console.log(\"context状态目前已恢复至\", context.state)\n            }).catch(e =>{\n                console.error(e.name, e.message, e)\n            });\n            btn.parentNode?.removeChild(btn);\n        }\n        btn.style.position = \"fixed\";\n        btn.style.background = \"yellow\";\n        btn.style.top = \"0\";\n        btn.style.width = \"100%\"\n\n        document.body.appendChild(btn)\n    }\n    let destination: MediaStreamAudioDestinationNode;\n    try{\n        destination = new MediaStreamAudioDestinationNode(context, {channelCount});\n    }catch(e){\n        //@ts-ignore\n        if (e.name === \"TypeError\"){\n            destination = context.createMediaStreamDestination();\n        }else{\n            console.error(e);\n            throw e;\n        }\n    }\n\n    if (channelCount === 1){\n        const mono: ChannelSettings = constraint.mono || {\n            data: brysj.slice(0),\n            loop: true,\n            gain: 1,\n        };\n        const data = typeof mono.data === \"string\" ? builtinABMap[mono.data].slice(0) : mono.data;\n        context.decodeAudioData(data, (buffer:AudioBuffer)=>{\n            const audioSource = context.createBufferSource()\n            audioSource.buffer = buffer;\n            audioSource.loop = mono.loop;\n            const gainNode = context.createGain();\n            gainNode.gain.value = mono.gain;\n            audioSource.connect(gainNode);\n            if (mono.noise){\n                addNoise({\n                    context,\n                    destination,\n                    inputNode: gainNode,\n                    gain: mono.noise.gain,\n                })\n            }else{\n                gainNode.connect(destination);\n            }\n            audioSource.start()\n        })\n    } else if (channelCount === 2){\n        const merger = context.createChannelMerger(channelCount);\n        merger.connect(destination);\n        if (constraint.left !== false){\n            const left:ChannelSettings = typeof constraint.left === \"object\" ? constraint.left : {\n                data: bbdbbjyy.slice(0),\n                loop: true,\n                gain: 1,\n            };\n            const data = (typeof left.data === \"string\") ? builtinABMap[left.data] : left.data\n            context.decodeAudioData(data, (buffer:AudioBuffer)=>{\n                const audioSource = context.createBufferSource()\n                audioSource.buffer = buffer;\n                audioSource.loop = left.loop;\n                const gainNode = context.createGain();\n                gainNode.gain.value = left.gain;\n                audioSource.connect(gainNode)\n                if (left.noise){\n                    addNoise({\n                        context,\n                        destination: merger,\n                        inputNode: gainNode,\n                        gain: left.noise.gain,\n                        output: 0,\n                        input: 0,\n                    })\n                }else{\n                    gainNode.connect(merger, 0, 0);\n                }\n                audioSource.start(0)\n            })\n        }\n        if (constraint.right !== false){\n            const right:ChannelSettings = typeof constraint.right === \"object\" ? constraint.right : {\n                data: mmdmmjwp.slice(0),\n                loop: true,\n                gain: 1,\n            };\n            const data = (typeof right.data === \"string\" ? builtinABMap[right.data].slice(0) : right.data);\n            context.decodeAudioData(data, (buffer:AudioBuffer)=>{\n                const audioSource = context.createBufferSource()\n                audioSource.buffer = buffer;\n                audioSource.loop = right.loop;\n                const gainNode = context.createGain();\n                gainNode.gain.value = right.gain;\n                audioSource.connect(gainNode)\n                if (right.noise){\n                    addNoise({\n                        context,\n                        destination: merger,\n                        inputNode: gainNode,\n                        gain: right.noise.gain,\n                        output: 0,\n                        input: 1,\n                    })\n                }else{\n                    gainNode.connect(merger, 0, 1);\n                }\n                audioSource.start(0)\n            })\n        }\n    }\n    const track = destination.stream.getAudioTracks()[0];\n    return {\n        track,\n        context,\n        destination,\n    };\n}","export interface fakeVideoTrackConstraints{\n    width: number;\n    height: number;\n    frameRate: number;\n    content: string;\n    background: string;\n}\n\nclass Clock{\n    private constraints: fakeVideoTrackConstraints;\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    private frameHistory: {time: number, fromSetInterval: boolean}[] = []\n    private frameHistoryTime = 2000;\n    private startTime: number = 0;\n    private interval: any = null;\n    private frameMinInterval: number = 0;\n    private trackEnded: boolean = false;\n    private videoInfo?: {\n        hookDrawFrame?: () => any;\n        track: MediaStreamTrack;\n        canvas: HTMLCanvasElement;\n        context: CanvasRenderingContext2D;\n    }\n    constructor(constraints: fakeVideoTrackConstraints) {\n        this.constraints = constraints;\n        this.canvas = document.createElement(\"canvas\")\n        this.canvas.width = constraints.width;\n        this.canvas.height = constraints.height;\n\n        const ctx = this.canvas.getContext('2d')\n        if (ctx){\n            this.ctx = ctx\n        }else{\n            throw new Error(\"Not supported\")\n        }\n    }\n    drawFrame (fromSetInterval:boolean = false, tsIn?: number){\n        const ts = Date.now()\n        if (this.trackEnded){\n            clearInterval(this.interval);\n            return;\n        }\n        this.frameHistory = this.frameHistory.filter((item)=>{\n            return ts - item.time < this.frameHistoryTime\n        })\n        const fps = this.frameHistory.length / Math.min(ts - this.startTime, this.frameHistoryTime) * 1000\n        const frameInterval = this.frameHistory[this.frameHistory.length - 1] ? ts - this.frameHistory[this.frameHistory.length - 1].time : 99999\n        if (\n            // fps超了\n            fps > this.constraints.frameRate ||\n            // 与上一帧间隔短了\n            this.frameMinInterval > frameInterval\n        ){\n            if (!fromSetInterval){\n                window.requestAnimationFrame(this.drawFrame.bind(this, false));\n            }\n            return;\n        }\n        this.frameHistory.push({time: ts, fromSetInterval})\n\n        const ctx = this.ctx;\n\n        ctx.save();\n        ctx.fillStyle = this.constraints.background;\n        ctx.fillRect(0,0,this.constraints.width,this.constraints.height);\n\n        const now = new Date(ts);\n        ctx.font = \"44px serif\";\n        ctx.fillStyle = \"black\";\n        const text1 = `${this.constraints.content}`\n        ctx.fillText(text1, this.constraints.width - 480, this.constraints.height - 150)\n        const text2 = `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}.${now.getMilliseconds()}`\n        ctx.fillText(text2, this.constraints.width - 480, this.constraints.height - 100)\n        const text3 = `Capture${this.canvas.width}x${this.canvas.height} fps${fps} `\n        ctx.fillText(text3, this.constraints.width - 480, this.constraints.height - 50)\n\n        ctx.translate(150,150);\n        ctx.rotate(-Math.PI/2);\n        ctx.strokeStyle = \"black\";\n        ctx.fillStyle = \"white\";\n        ctx.lineWidth = 8;\n        ctx.lineCap = \"round\";\n\n        // Hour marks\n        ctx.save();\n        for (var i=0;i<12;i++){\n            ctx.beginPath();\n            ctx.rotate(Math.PI/6);\n            ctx.moveTo(100,0);\n            ctx.lineTo(120,0);\n            ctx.stroke();\n        }\n        ctx.restore();\n\n        // Minute marks\n        ctx.save();\n        ctx.lineWidth = 5;\n        for (i=0;i<60;i++){\n            if (i%5!=0) {\n                ctx.beginPath();\n                ctx.moveTo(117,0);\n                ctx.lineTo(120,0);\n                ctx.stroke();\n            }\n            ctx.rotate(Math.PI/30);\n        }\n        ctx.restore();\n\n        var sec = now.getSeconds();\n        var min = now.getMinutes();\n        var hr  = now.getHours();\n        hr = hr>=12 ? hr-12 : hr;\n\n        ctx.fillStyle = \"black\";\n\n        // write Hours\n        ctx.save();\n        ctx.rotate( hr*(Math.PI/6) + (Math.PI/360)*min + (Math.PI/21600)*sec )\n        ctx.lineWidth = 14;\n        ctx.beginPath();\n        ctx.moveTo(-20,0);\n        ctx.lineTo(80,0);\n        ctx.stroke();\n        ctx.restore();\n\n        // write Minutes\n        ctx.save();\n        ctx.rotate( (Math.PI/30)*min + (Math.PI/1800)*sec )\n        ctx.lineWidth = 10;\n        ctx.beginPath();\n        ctx.moveTo(-28,0);\n        ctx.lineTo(112,0);\n        ctx.stroke();\n        ctx.restore();\n\n        // Write seconds\n        ctx.save();\n        ctx.rotate((now.getTime() % 60000) / 1000 * Math.PI/30);\n        ctx.strokeStyle = \"#D40000\";\n        ctx.fillStyle = \"#D40000\";\n        ctx.lineWidth = 6;\n        ctx.beginPath();\n        ctx.moveTo(-30,0);\n        ctx.lineTo(83,0);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.arc(0,0,10,0,Math.PI*2,true);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(95,0,10,0,Math.PI*2,true);\n        ctx.stroke();\n        ctx.fillStyle = \"rgba(0,0,0,0)\";\n        ctx.arc(0,0,3,0,Math.PI*2,true);\n        ctx.fill();\n        ctx.restore();\n\n        //\n        // write Minutes\n        ctx.save();\n        ctx.rotate( (Math.PI/1000 * 2) * (Date.now() % 1000))\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(-28,0);\n        ctx.lineTo(120,0);\n        ctx.stroke();\n        ctx.restore();\n        //\n\n        ctx.beginPath();\n        ctx.lineWidth = 14;\n        ctx.strokeStyle = '#325FA2';\n        ctx.arc(0,0,142,0,Math.PI*2,true);\n        ctx.stroke();\n\n        ctx.restore();\n        if (this.videoInfo?.hookDrawFrame){\n            this.videoInfo.hookDrawFrame()\n        }\n        if (!fromSetInterval){\n            window.requestAnimationFrame(this.drawFrame.bind(this, false));\n        }\n    }\n    start (){\n        this.startTime = Date.now();\n        this.frameMinInterval = Math.floor(1000 / this.constraints.frameRate)\n        this.drawFrame(false, performance.now())\n        this.interval = setInterval(this.drawFrame.bind(this, true), 0)\n        //@ts-ignore\n        const stream:MediaStream = this.canvas.captureStream(this.constraints.frameRate)\n        const videoTrack = stream.getVideoTracks()[0];\n        videoTrack.addEventListener(\"ended\", ()=>{\n            this.trackEnded = true\n        })\n        // setInterval(()=>{\n        //     const cntFromSetInterval = this.frameHistory.filter((item)=>{\n        //         return item.fromSetInterval;\n        //     })\n        //     console.log(\"cntFromSetInterval\", cntFromSetInterval.length, \"/\", this.frameHistory.length)\n        // }, this.frameHistoryTime)\n        this.videoInfo  = {\n            track: videoTrack,\n            context: this.ctx,\n            canvas: this.canvas,\n        }\n        return this.videoInfo;\n    }\n}\n\nexport function getVideoTrack(constraints: fakeVideoTrackConstraints){\n    const clock = new Clock(constraints);\n    const result = clock.start()\n    return result;\n}","import {ChannelSettings, fakeAudioTrackConstraints, getAudioTrack} from \"./audio/audio\";\nimport {fakeVideoTrackConstraints, getVideoTrack} from \"./video/video\";\n\nexport interface videoTrackConstraintInput{\n    width?: number;\n    height?: number;\n    frameRate?: number;\n    content?: string;\n    background?: string;\n}\n\nexport interface audioTrackConstraintInput{\n    sampleRate?: number;\n    mono?: ChannelSettings;\n    left?: boolean|ChannelSettings;\n    right?: boolean|ChannelSettings;\n    channelCount?: 1|2;\n}\n\ninterface fakeMediaStreamConstraints{\n    audio?: boolean|fakeAudioTrackConstraints\n    video?: boolean|videoTrackConstraintInput\n}\n\nexport const audioTracks:MediaStreamTrack[] = []\nexport const videoTracks:MediaStreamTrack[] = []\n\nclass FakeMediaStream{\n    audio?: {\n        track: MediaStreamTrack;\n        context: AudioContext;\n        destination: MediaStreamAudioDestinationNode;\n    };\n    video?: {\n        track: MediaStreamTrack;\n        context: CanvasRenderingContext2D;\n        canvas: HTMLCanvasElement;\n        hookDrawFrame?: () => any;\n    }\n    getMediaStream (){\n        const tracks:MediaStreamTrack[] = [];\n        if (this.audio){\n            tracks.push(this.audio.track);\n        }\n        if (this.video){\n            tracks.push(this.video.track);\n        }\n        const mediaStream = new MediaStream(tracks);\n        return mediaStream;\n    }\n}\n\nexport function getFakeMedia(constrants: fakeMediaStreamConstraints){\n    const fakeMediaStream = new FakeMediaStream();\n    if (constrants.audio){\n        // promises.push(getAudioTrack().then((track)=>{\n        //     audioTrack = track\n        // }))\n        fakeMediaStream.audio = getAudioTrack(constrants.audio === true ? {channelCount: 1} : constrants.audio);\n        audioTracks.push(fakeMediaStream.audio.track)\n    }\n    if (constrants.video){\n        const defaultVideoConstraints:fakeVideoTrackConstraints = {\n            width: 1024,\n            height: 768,\n            frameRate: 60,\n            content: \"Video\",\n            background: \"#ddd\",\n        };\n        const videoConstraints = Object.assign({}, defaultVideoConstraints, constrants.video === true ? {} : constrants.video)\n        const videoTrackInfo = getVideoTrack(videoConstraints);\n        fakeMediaStream.video = videoTrackInfo;\n        videoTracks.push(videoTrackInfo.track)\n    }\n    return fakeMediaStream;\n}"],"names":["root","factory","exports","module","define","amd","self","base64Data","binary","window","atob","Buffer","from","toString","bytes","Uint8Array","length","i","charCodeAt","buffer","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","brysj","bbdbbjyy","mmdmmjwp","builtinABMap","ctxMap","addNoise","options","scriptNode","context","createScriptProcessor","connect","destination","output","input","inputNode","onaudioprocess","audioProcessingEvent","inputBuffer","outputBuffer","channel","numberOfChannels","inputData","getChannelData","outputData","sample","Math","random","gain","Clock","constructor","constraints","frameHistory","frameHistoryTime","startTime","interval","frameMinInterval","trackEnded","this","canvas","document","createElement","width","height","ctx","getContext","Error","drawFrame","fromSetInterval","tsIn","ts","Date","now","clearInterval","filter","item","time","fps","min","frameInterval","frameRate","requestAnimationFrame","bind","push","save","fillStyle","background","fillRect","font","text1","content","fillText","text2","getHours","getMinutes","getSeconds","getMilliseconds","text3","translate","rotate","PI","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","restore","sec","hr","getTime","arc","fill","videoInfo","hookDrawFrame","start","floor","performance","setInterval","videoTrack","captureStream","getVideoTracks","addEventListener","track","audioTracks","videoTracks","FakeMediaStream","getMediaStream","tracks","audio","video","MediaStream","getFakeMedia","constrants","fakeMediaStream","constraint","sampleRate","channelCount","AudioContext","webkitAudioContext","state","btn","innerText","onclick","resume","then","console","log","catch","e","error","name","message","parentNode","removeChild","style","position","top","body","appendChild","MediaStreamAudioDestinationNode","createMediaStreamDestination","mono","data","slice","loop","decodeAudioData","audioSource","createBufferSource","gainNode","createGain","noise","merger","createChannelMerger","left","right","stream","getAudioTracks","getAudioTrack","defaultVideoConstraints","videoConstraints","assign","videoTrackInfo"],"sourceRoot":""}